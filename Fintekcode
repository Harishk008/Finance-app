  def extract_amount(text):
	# Regex to find INR/RS amounts (e.g., Rs. 1,234.56, INR 1234, ₹1234)
	patterns = [
		r'\b(?:rs\.?|inr|₹)\s?([\d,]+(?:\.\d{1,2})?)',
		r'([\d,]+(?:\.\d{1,2})?)\s?(?:rs\.?|inr|₹)'
	]
	for pat in patterns:
		match = re.search(pat, text, re.IGNORECASE)
		if match:
			return match.group(1)
	return None
import re
BANKING_DOMAINS = [
	'@hdfc.net', '@hdfcbank.net', '@icici.com', '@axisbank.com', '@sbi.co.in', '@kotak.com', '@yesbank.in', '@idfc.com', '@indusind.com', '@bankofbaroda.com', '@unionbankofindia.com', '@canarabank.com', '@icicibank.com', '@rblbank.com', '@federalbank.co.in', '@idbibank.co.in', '@centralbank.co.in', '@bankofindia.co.in', '@pnb.co.in', '@bankofmaharashtra.in', '@uco.bank', '@dcb.in', '@citi.com', '@hsbc.co.in', '@standardchartered.com', '@dbs.com', '@jpmorgan.com', '@sc.com', '@abnamro.com', '@deutschebank.co.in', '@barclays.com', '@bnpparibas.com', '@credit-suisse.com', '@ing.com', '@mufg.jp', '@sumitomomitsui.com', '@socgen.com', '@unicredit.eu', '@vijayabank.com', '@allahabadbank.in', '@syndicatebank.in', '@orientalbankofcommerce.in', '@indianbank.in', '@indianoverseasbank.com', '@karurvysyabank.co.in', '@lakshmivilasbank.com', '@southindianbank.com', '@tmb.in', '@cityunionbank.com', '@dhanbank.com', '@esafbank.com', '@suryodaybank.com', '@utkarsh.bank', '@bandhanbank.com', '@equitasbank.com', '@idfcfirstbank.com', '@jandhanbank.com'
]
def extract_email_address(sender):
	# Handles 'Name <email@domain.com>' and 'Name email@domain.com'
	match = re.search(r'<([^>]+)>', sender)
	if match:
		return match.group(1).lower()
	# If no <>, try to find an email address in the string
	match = re.search(r'([\w\.-]+@[\w\.-]+)', sender)
	if match:
		return match.group(1).lower()
	return sender.lower()

def is_banking_domain(sender):
	email = extract_email_address(sender)
	return any(domain in email for domain in BANKING_DOMAINS)

def is_transaction_email(subject, snippet):
	# Simple keyword-based filter for transaction emails
	keywords = [
		'debited', 'credited', 'transaction', 'payment', 'withdrawn', 'deposited', 'purchase', 'spent', 'received', 'transfer', 'upi', 'imps', 'rtgs', 'neft', 'paid', 'bill', 'statement', 'otp', 'balance', 'loan', 'emi', 'refund', 'reversal', 'charge', 'fee', 'interest', 'salary', 'bonus', 'cashback', 'reward', 'invoice', 'receipt', 'settlement', 'autopay', 'mandate', 'standing instruction'
	]
	text = (subject or '') + ' ' + (snippet or '')
	return any(kw in text.lower() for kw in keywords)
# Gmail API Authentication Setup
import os
import pickle
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from google.auth.transport.requests import Request

# If modifying these SCOPES, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/gmail.modify']
CREDENTIALS = {
	"installed": {
		"client_id": "390382692811-2jqmto1di1oir3tjugu07lbqiqdu065f.apps.googleusercontent.com",
		"project_id": "gmail-api-470901",
		"auth_uri": "https://accounts.google.com/o/oauth2/auth",
		"token_uri": "https://oauth2.googleapis.com/token",
		"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
		"client_secret": "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",
		"redirect_uris": ["http://localhost"]
	}
}

def get_gmail_service(token_data=None, force_reauth=False):
	creds = None
	if token_data:
		from google.oauth2.credentials import Credentials
		creds = Credentials(
			token=token_data["token"],
			refresh_token=token_data["refresh_token"],
			token_uri=token_data["token_uri"],
			client_id=token_data["client_id"],
			client_secret=token_data["client_secret"],
			scopes=token_data["scopes"]
		)
		# Store credentials in pickle file for future use
		with open('token.pickle', 'wb') as token:
			pickle.dump(creds, token)
	else:
		# The file token.pickle stores the user's access and refresh tokens
		if force_reauth and os.path.exists('token.pickle'):
			os.remove('token.pickle')
		if os.path.exists('token.pickle'):
			with open('token.pickle', 'rb') as token:
				creds = pickle.load(token)
		if not creds or not creds.valid:
			if creds and creds.expired and creds.refresh_token:
				creds.refresh(Request())
			else:
				flow = InstalledAppFlow.from_client_config(CREDENTIALS, SCOPES)
				creds = flow.run_local_server(port=0)
			# Store credentials in pickle file for future use
			with open('token.pickle', 'wb') as token:
				pickle.dump(creds, token)
	service = build('gmail', 'v1', credentials=creds)
	return service

if __name__ == "__main__":
	# Set force_reauth=True to always prompt for Gmail authentication
	service = get_gmail_service(force_reauth=True)
	print("Gmail API authenticated successfully.")


	# Fetch recent emails (last 50, no query filter)
	results = service.users().messages().list(userId='me', maxResults=200).execute()
	messages = results.get('messages', [])
	print(f"Fetched {len(messages)} recent emails.")

	filtered_emails = []
	for msg in messages:
		msg_id = msg['id']
		msg_detail = service.users().messages().get(userId='me', id=msg_id, format='metadata', metadataHeaders=['From', 'Subject']).execute()
		headers = msg_detail.get('payload', {}).get('headers', [])
		sender = subject = None
		for h in headers:
			if h['name'].lower() == 'from':
				sender = h['value']
			if h['name'].lower() == 'subject':
				subject = h['value']
		snippet = msg_detail.get('snippet', '')
		extracted_email = extract_email_address(sender) if sender else None
		domain_match = any(domain in extracted_email for domain in BANKING_DOMAINS) if extracted_email else False
		if sender and domain_match:
			# Only include emails with 'credited to your account ending' or 'debited' in subject or snippet
			text = (subject or '') + ' ' + (snippet or '')
			if ('credited to your account ending' in text.lower()) or ('debited' in text.lower()):
				filtered_emails.append({
					'id': msg_id,
					'from': sender,
					'subject': subject,
					'snippet': snippet
				})

	print(f"Filtered {len(filtered_emails)} banking domain emails.")

	# Print only banking domain emails
	for email in filtered_emails:
		print(f"From: {email['from']}")
		print(f"Subject: {email['subject']}")
		print(f"Snippet: {email['snippet']}")
		print('-' * 40)
